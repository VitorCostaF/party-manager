package br.com.ieoafestasedecoracoes.partymanager.vendorservice.controller;

import static org.mockito.Mockito.RETURNS_DEEP_STUBS;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.delete;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.put;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestInstance;
import org.junit.jupiter.api.TestInstance.Lifecycle;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.http.MediaType;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.ResultHandler;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;
import org.springframework.web.context.WebApplicationContext;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.ObjectNode;

import br.com.ieoafestasedecoracoes.partymanager.vendorservice.to.VendorTO;

@SpringBootTest
@TestInstance(Lifecycle.PER_CLASS)
class VendorControllerTest {

	private MockMvc mockMvc;

	@Autowired
	private WebApplicationContext context;
	
	private ObjectMapper mapper;
	
	private VendorTO vendorTO;
	
	@BeforeAll
	public void setup() throws Exception {
		mockMvc = MockMvcBuilders.webAppContextSetup(context).build();
		mapper = new ObjectMapper();
		
		createVendor();
	}

	@Test
	void shouldAcessFindAllWithSucess() throws Exception {
		mockMvc.perform(get("/vendors")).andExpect(status().isOk());
	}
	
	@Test
	void shouldAcessFindByIdWithSucess() throws Exception {
		mockMvc.perform(get("/vendors/1")).andExpect(status().isOk());
	}
	
	@Test
	void shouldAcessDeleteByIdWithSucess() throws Exception {
		mockMvc.perform(delete("/vendors/1")).andExpect(status().isNoContent());
	}
	
	@Test
	void shouldFindByEmailWithSucess() throws Exception {
		mockMvc.perform(get("/vendors/email/email.teste@email.com")).andExpect(status().isOk());
	}
	
	@Test
	void shouldFindByFirstNameWithSucess() throws Exception {
		mockMvc.perform(get("/vendors/first-name/name")).andExpect(status().isOk());
	}
	
	@Test
	void shouldUpdateAVendor() throws Exception {
		
		ObjectNode vendorJson = (ObjectNode)mapper.valueToTree(vendorTO);
		
		vendorJson.put("first-name", "vendorModified");
		vendorJson.put("last-name", "oneModified");
		
		String vendorStrJson = mapper.writeValueAsString(vendorJson);
		
		mockMvc.perform( // 
				put("/vendors") //
					.contentType(MediaType.APPLICATION_JSON) //
					.content(vendorStrJson)) //
				.andExpect(
					content()
					.json(vendorStrJson));
	}
	
	private void createVendor() throws Exception {
		vendorTO = new VendorTO(1, "vendor", "one", "vendo.one@email.com", "123");
		
		String vendorStrJson = mapper.writeValueAsString(vendorTO);
		
		String responseJson =  mockMvc.perform( // 
				post("/vendors") //
					.contentType(MediaType.APPLICATION_JSON) //
					.content(vendorStrJson)).andReturn().getResponse().getContentAsString();
		
		vendorTO.setId(mapper.readTree(responseJson).findValue("id").asInt());
		
	}
	
}
