package br.com.ieoafestasedecoracoes.partymanager.usersservice.controller;

import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.delete;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestInstance;
import org.junit.jupiter.api.TestInstance.Lifecycle;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;
import org.springframework.web.context.WebApplicationContext;

@SpringBootTest
@TestInstance(Lifecycle.PER_CLASS)
class UserControllerTest {

	private MockMvc mockMvc;

	@Autowired
	private WebApplicationContext context;
	
	@BeforeAll
	public void setup() {
		mockMvc = MockMvcBuilders.webAppContextSetup(context).build();
	}

	@Test
	void shouldAcessFindAllWithSucess() throws Exception {
		mockMvc.perform(get("/users")).andExpect(status().isOk());
	}
	
	@Test
	void shouldAcessFindByIdWithSucess() throws Exception {
		mockMvc.perform(get("/users/1")).andExpect(status().isOk());
	}
	
	@Test
	void shouldAcessDeleteByIdWithSucess() throws Exception {
		mockMvc.perform(delete("/users/1")).andExpect(status().isNoContent());
	}
	
	@Test
	void shouldFindByEmailWithSucess() throws Exception {
		mockMvc.perform(get("/users/email/email.teste@email.com")).andExpect(status().isOk());
	}
	
	@Test
	void shouldFindByFirstNameWithSucess() throws Exception {
		mockMvc.perform(get("/users/first-name/name")).andExpect(status().isOk());
	}
	
}
